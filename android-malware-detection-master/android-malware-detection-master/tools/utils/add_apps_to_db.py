#!/usr/bin/env python

import psycopg2, argparse, getpass, json, os

def main():
  #----------------------------------------------------------------------
  # Arguments
  #----------------------------------------------------------------------

  parser = argparse.ArgumentParser(description='Add the apps in the \
      folders specified in a list to the database.', add_help=False)
  parser.add_argument('--help', action='help', help='show this help \
      message.')
  parser.add_argument('-h', metavar='host', type=str, required=True)
  parser.add_argument('-d', metavar='database', type=str, required=True)
  parser.add_argument('-u', metavar='username', type=str, required=True)
  parser.add_argument('-p', metavar='path', type=str, required=True)
  parser.add_argument('-c', metavar='categories', type=str, required=True)
  args = parser.parse_args()

  passwd = getpass.getpass()

  #----------------------------------------------------------------------
  # Database
  #----------------------------------------------------------------------
  try:
    sql = 'host=%s dbname=%s user=%s password=%s' % \
        (args.h, args.d, args.u, passwd)
    conn = psycopg2.connect(sql)
    cur =  conn.cursor()

    # Get all the categories from the JSON file.
    categories = json.load(open(args.c, 'r'))['categories']

    for category in categories:
      a_path = args.p + '/' + category
      apps = os.listdir(a_path)

      for a_name in apps:
        # Check if the app has already been in the database. If it has,
        # it means this app belongs to multiple categories and need its
        # category column to be updated.
        sql = 'SELECT a_id, a_categories FROM apps WHERE a_name = %s'
        cur.execute(sql, (a_name,))
        app = cur.fetchone()

        if app:
          a_id, a_categories = app
          a_categories.append(category)
          a_categories.sort()
          sql = 'UPDATE apps SET a_categories = %s WHERE a_id = %s'
          cur.execute(sql, (a_categories, a_id))

        else:
          sql = 'INSERT INTO apps (a_name, a_path, a_categories) \
              VALUES (%s, %s, %s)'
          cur.execute(sql, (a_name, a_path + '/' + a_name, [category]))

    conn.commit()

  except Exception as e:
    print e

  finally:
    cur.close()
    conn.close()


if __name__ == '__main__':
  main()

