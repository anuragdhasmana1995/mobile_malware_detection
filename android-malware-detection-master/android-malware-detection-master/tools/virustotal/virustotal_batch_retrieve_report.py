#!/usr/bin/env python

import virustotal

import psycopg2, argparse, getpass, json, sys

def main():
  # Arguments
  parser = argparse.ArgumentParser(description='Retrieve the reports \
      from VirusTotal.')
  parser.add_argument('-H', metavar='host', type=str,
      nargs=1, required=True)
  parser.add_argument('-d', metavar='database', type=str,
      nargs=1, required=True)
  parser.add_argument('-u', metavar='username', type=str,
      nargs=1, required=True)
  parser.add_argument('-c', metavar='virustotal config file', type=str,
      nargs=1, required=True)
  args = parser.parse_args()

  passwd = getpass.getpass()
  vtconfigfile = args.c[0]

  try:
    # Establish the connection to the database.
    sql = 'host=%s dbname=%s user=%s password=%s' % \
        (args.H[0], args.d[0], args.u[0], passwd)
    conn = psycopg2.connect(sql)
    cur =  conn.cursor()

    # Get all the apps from the database.
    sql = 'SELECT a_id, a_name, a_vt_sha256 FROM apps \
        WHERE a_vt_sha256 IS NOT NULL AND a_vt_report IS NULL'
    cur.execute(sql)
    apps = cur.fetchall()

    total, count = len(apps), .0

    # Retrieve the reports from VirusTotal.
    for app in apps:
      a_id, a_name, a_hash = app[0], app[1], app[2]
      count += 1

      # Progress bar
      sys.stdout.write('\r')
      for i in range(80):
        sys.stdout.write(' ')
      sys.stdout.write('\r[%d%% | Req. %d] Upload %s ' \
          % (count * 100 / total, count, a_name))
      sys.stdout.flush()

      # Get the response.
      response = dict()
      while True:
        response = virustotal.retrieve_report(
            a_hash, vtconfigfile, verbose=True)

        if response['response_code'] == 1:
          break
        else:
          sys.stdout.write('|')
          sys.stdout.flush()

      # Update the database.
      sql = 'UPDATE apps SET a_vt_report = %s WHERE a_id = %s'
      cur.execute(sql, (json.dumps(response['scans']), a_id))
      conn.commit()
      

  except Exception as e:
    print e

  finally:
    cur.close()
    conn.close()


if __name__ == '__main__':
  main()

