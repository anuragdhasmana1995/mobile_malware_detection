import pandas as pd
import numpy as np
import operator
import pickle
import os
import re
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.models import model_from_json
from androguard.core.bytecodes.apk import APK
from androguard.core.bytecodes.dvm import DalvikVMFormat
from androguard.core.analysis.analysis import Analysis
from androguard.decompiler.decompiler import DecompilerJADX
from androguard.core.androconf import show_logging

def create_vector(perms, apis, df_columns, malicious):
    row = [0 for _ in df_columns]
    count = 0
    for feature in df_columns:
        if feature in perms:
            row[count] = 1
        if feature in apis:
            row[count] = 1
        count+=1
        
    index = df_columns.index('type')
    print(index)
    if malicious:
        row[index] = 1
    else:
        row[index] = 0    
    return row  

def get_permissions(path):
    application = APK(path)
    permissions = application.get_permissions()
    permissions = list(set(permissions))
    return permissions

def get_apis(path):
  
  application = APK(path)
  application_dex = DalvikVMFormat(application.get_dex())
  application_x = Analysis(application_dex)

  methods = set()
  cs = [cc.get_name() for cc in application_dex.get_classes()]

  for method in application_dex.get_methods():
    g = application_x.get_method(method)

    if method.get_code() == None:
      continue

    for i in g.get_basic_blocks().get():
      for ins in i.get_instructions():
        
        output = ins.get_output()
        match = re.search(r'(L[^;]*;)->[^\(]*\([^\)]*\).*', output)
        if match and match.group(1) not in cs:
          methods.add(match.group())

  methods = list(methods)
  return methods

path = r'C:\Users\Anurag\Documents\GitHub\mobile_malware_detection\benign_apks\Callbreak Multiplayer - 0.2.9 - APKTurbo.com.apk'

perms = get_permissions(path)
apis = get_apis(path)
selected_features = []
df_columns = []

with open(r'saved_items/final_selected_feature.pickle', 'rb') as handle:
    selected_features = pickle.load(handle)

df = pd.read_csv(r'csv/final_training_set.csv')
df_columns = list(df.columns.values)

print(len(selected_features))
print(len(df_columns))
print(df.columns.get_loc('type'))


row = create_vector(perms, apis, df_columns, True)

df_1 = pd.DataFrame(columns = df_columns)
df_1.loc[0] = row
df_1 = df_1[selected_features]

print(df_1.shape)

X = np.array(df_1)

# load json and create model
json_file = open('saved_items/model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("saved_items/model.h5")
print("Loaded model from disk")

loaded_model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

print(loaded_model.predict(X)[0])

if loaded_model.predict(X)[0] < 0.1:
    print("safe")






    
    
