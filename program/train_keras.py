import pandas as pd
import numpy as np
import pickle
from keras.models import Sequential
from keras.layers import Dense, Dropout
from sklearn import preprocessing
from sklearn.model_selection import train_test_split


df = pd.read_csv(r'csv\final_training_set.csv', index_col = 0)
df = df.sample(frac=1).reset_index(drop=True)

feature_columns = []

with open(r'saved_items\final_selected_feature.pickle' , 'rb') as handle:
    feature_columns = pickle.load(handle)

df_main = df[feature_columns]


X = np.array(df_main)
y = np.array(df['type'])

##print(X.shape)
##print(df[df['type']==1].count())


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

print(X_train.shape)
print(y_train.shape)


model = Sequential()
model.add(Dense(250, input_dim=853, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(250, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(250, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(250, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

model.summary()

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

model.fit(X_train, y_train,
          epochs=30)

score = model.evaluate(X_test, y_test)
print('Test loss:', score[0])
print('Test accuracy:', score[1])


model_json = model.to_json()
with open("saved_items/model.json", "w") as json_file:
    json_file.write(model_json)
    
model.save_weights("saved_items/model.h5")
print("Model saved")

